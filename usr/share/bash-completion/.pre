#
#   bash_completion - programmable completion functions for bash 3.x
#             (backwards compatible with bash 2.05b)
#
#   Copyright © 2006-2008, Ian Macdonald <ian@caliban.org>
#             © 2009, Bash Completion Maintainers
#                     <bash-completion-devel@lists.alioth.debian.org>
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2, or (at your option)
#   any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software Foundation,
#   Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
#   The latest version of this software can be obtained here:
#
#   http://bash-completion.alioth.debian.org/
#
#   RELEASE: 1.1

if [[ $- == *v* ]]; then
    BASH_COMPLETION_ORIGINAL_V_VALUE="-v"
else
    BASH_COMPLETION_ORIGINAL_V_VALUE="+v"
fi

if [[ -n $BASH_COMPLETION_DEBUG ]]; then
    set -v
else
    set +v
fi

# Alter the following to reflect the location of this file.
#
[ -n "$BASH_COMPLETION" ] || BASH_COMPLETION=/etc/bash_completion
[ -n "$BASH_COMPLETION_DIR" ] || BASH_COMPLETION_DIR=/etc/bash_completion.d
[ -n "$BASH_COMPLETION_COMPAT_DIR" ] || BASH_COMPLETION_COMPAT_DIR=/etc/bash_completion.d
readonly BASH_COMPLETION BASH_COMPLETION_DIR BASH_COMPLETION_COMPAT_DIR

# Set a couple of useful vars
#
UNAME=$( uname -s )
# strip OS type and version under Cygwin (e.g. CYGWIN_NT-5.1 => Cygwin)
UNAME=${UNAME/CYGWIN_*/Cygwin}

case ${UNAME} in
    Linux|GNU|GNU/*) USERLAND=GNU ;;
    *) USERLAND=${UNAME} ;;
esac

# features supported by bash 2.05 and higher
if [ ${BASH_VERSINFO[0]} -eq 2 ] && [[ ${BASH_VERSINFO[1]} > 04 ]] ||
    [ ${BASH_VERSINFO[0]} -gt 2 ]; then
    declare -r bash205=$BASH_VERSION 2>/dev/null || :
    default="-o default"
    dirnames="-o dirnames"
    filenames="-o filenames"
    compopt=:
fi
# features supported by bash 2.05b and higher
if [ ${BASH_VERSINFO[0]} -eq 2 ] && [[ ${BASH_VERSINFO[1]} = "05b" ]] ||
    [ ${BASH_VERSINFO[0]} -gt 2 ]; then
    declare -r bash205b=$BASH_VERSION 2>/dev/null || :
    nospace="-o nospace"
fi
# features supported by bash 3.0 and higher
if [ ${BASH_VERSINFO[0]} -gt 2 ]; then
    declare -r bash3=$BASH_VERSION 2>/dev/null || :
    bashdefault="-o bashdefault"
    plusdirs="-o plusdirs"
fi
# features supported by bash 4.0 and higher
if [ ${BASH_VERSINFO[0]} -gt 3 ]; then
    export bash4=$BASH_VERSION 2>/dev/null || :
    compopt=compopt
fi

# Turn on extended globbing and programmable completion
shopt -s extglob progcomp

# start of section containing completion functions called by other functions

# This function checks whether we have a given program on the system.
# No need for bulky functions in memory if we don't.
#
have()
{
    unset -v have
    PATH=$PATH:/sbin:/usr/sbin:/usr/local/sbin type $1 &>/dev/null &&
    have="yes"
}

# use GNU sed if we have it, since its extensions are still used in our code
#
[ $USERLAND != GNU ] && have gsed && alias sed=gsed

# This function checks whether a given readline variable
# is `on'.
#
_rl_enabled()
{
    [[ "$( bind -v )" = *$1+([[:space:]])on* ]]
}

# This function shell-quotes the argument
quote()
{
    echo \'${1//\'/\'\\\'\'}\' #'# Help vim syntax highlighting
}

# This function quotes the argument in a way so that readline dequoting
# results in the original argument
quote_readline()
{
    if [ -n "$bash4" ] ; then
        # This function isn't really necessary on bash 4
        # See: http://lists.gnu.org/archive/html/bug-bash/2009-03/msg00155.html
        echo "${1}"
        return
    fi
    local t="${1//\\/\\\\}"
    echo \'${t//\'/\'\\\'\'}\' #'# Help vim syntax highlighting
}

# This function shell-dequotes the argument
dequote()
{
    eval echo "$1" 2> /dev/null
}

# Get the word to complete.
# This is nicer than ${COMP_WORDS[$COMP_CWORD]}, since it handles cases
# where the user is completing in the middle of a word.
# (For example, if the line is "ls foobar",
# and the cursor is here -------->   ^
# it will complete just "foo", not "foobar", which is what the user wants.)
# @param $1 string  (optional) Characters out of $COMP_WORDBREAKS which should
#     NOT be considered word breaks. This is useful for things like scp where
#     we want to return host:path and not only path.
#     NOTE: This parameter only applies to bash-4.

_get_cword()
{
    if [ -n "$bash4" ] ; then
        __get_cword4 "$@"
    else
        __get_cword3
    fi
} # _get_cword()


# Get the word to complete on bash-3, where words are not broken by
# COMP_WORDBREAKS characters and the COMP_CWORD variables look like this, for
# example:
#
#     $ a b:c<TAB>
#     COMP_CWORD: 1
#     COMP_CWORDS:
#     0: a
#     1: b:c
#
# See also:
# _get_cword, main routine
# __get_cword4, bash-4 variant
#
__get_cword3()
{
    if [[ "${#COMP_WORDS[COMP_CWORD]}" -eq 0 ]] || [[ "$COMP_POINT" == "${#COMP_LINE}" ]]; then
        printf "%s" "${COMP_WORDS[COMP_CWORD]}"
    else
        local i
        local cur="$COMP_LINE"
        local index="$COMP_POINT"
        for (( i = 0; i <= COMP_CWORD; ++i )); do
            while [[
                # Current COMP_WORD fits in $cur?
                "${#cur}" -ge ${#COMP_WORDS[i]} &&
                # $cur doesn't match COMP_WORD?
                "${cur:0:${#COMP_WORDS[i]}}" != "${COMP_WORDS[i]}"
                ]]; do
                # Strip first character
                cur="${cur:1}"
                # Decrease cursor position
                index="$(( index - 1 ))"
            done

            # Does found COMP_WORD matches COMP_CWORD?
            if [[ "$i" -lt "$COMP_CWORD" ]]; then
                # No, COMP_CWORD lies further;
                local old_size="${#cur}"
                cur="${cur#${COMP_WORDS[i]}}"
                local new_size="${#cur}"
                index="$(( index - old_size + new_size ))"
            fi
        done

        if [[ "${COMP_WORDS[COMP_CWORD]:0:${#cur}}" != "$cur" ]]; then
            # We messed up! At least return the whole word so things
            # keep working
            printf "%s" "${COMP_WORDS[COMP_CWORD]}"
        else
            printf "%s" "${cur:0:$index}"
        fi
    fi
} # __get_cword3()


# Get the word to complete on bash-4, where words are splitted by
# COMP_WORDBREAKS characters (default is " \t\n\"'><=;|&(:") and the COMP_CWORD
# variables look like this, for example:
#
#     $ a b:c<TAB>
#     COMP_CWORD: 3
#     COMP_CWORDS:
#     0: a
#     1: b
#     2: :
#     3: c
#
# @oaram $1 string
# $1 string  (optional) Characters out of $COMP_WORDBREAKS which should
#     NOT be considered word breaks. This is useful for things like scp where
#     we want to return host:path and not only path.
# See also:
# _get_cword, main routine
# __get_cword3, bash-3 variant
#
__get_cword4()
{
    local i
    local LC_CTYPE=C
    local WORDBREAKS=$COMP_WORDBREAKS
    # Strip single quote (') and double quote (") from WORDBREAKS to
    # workaround a bug in bash-4.0, where quoted words are split
    # unintended, see:
    # http://www.mail-archive.com/bug-bash@gnu.org/msg06095.html
    # This fixes simple quoting (e.g. $ a "b<TAB> returns "b instead of b)
    # but still fails quoted spaces (e.g. $ a "b c<TAB> returns c instead
    # of "b c).
    WORDBREAKS=${WORDBREAKS//\"/}
    WORDBREAKS=${WORDBREAKS//\'/}
    if [ -n "$1" ]; then
        for (( i=0; i<${#1}; ++i )); do
            local char=${1:$i:1}
            WORDBREAKS=${WORDBREAKS//$char/}
        done
    fi
    local cur=${COMP_LINE:0:$COMP_POINT}
    local tmp=$cur
    local word_start=`expr "$tmp" : '.*['"$WORDBREAKS"']'`
    while [ "$word_start" -ge 2 ]; do
        # Get character before $word_start
        local char=${cur:$(( $word_start - 2 )):1}
        # If the WORDBREAK character isn't escaped, exit loop
        if [ "$char" != "\\" ]; then
            break
        fi
        # The WORDBREAK character is escaped;
        # Recalculate $word_start
        tmp=${COMP_LINE:0:$(( $word_start - 2 ))}
        word_start=`expr "$tmp" : '.*['"$WORDBREAKS"']'`
    done

    cur=${cur:$word_start}
    printf "%s" "$cur"
} # __get_cword4()


# This function performs file and directory completion. It's better than
# simply using 'compgen -f', because it honours spaces in filenames.
# If passed -d, it completes only on directories. If passed anything else,
# it's assumed to be a file glob to complete on.
#
_filedir()
{
    local IFS=$'\t\n' xspec

    _expand || return 0

    local -a toks
    local tmp

    # TODO: I've removed a "[ -n $tmp ] &&" before `echo $tmp',
    #       and everything works again. If this bug
    #       suddenly appears again (i.e. "cd /b<TAB>"
    #       becomes "cd /"), remember to check for
    #       other similar conditionals (here and
    #       _filedir_xspec()). --David
    # NOTE: The comment above has been moved outside of the subshell below,
    #       because quotes-in-comments-in-a-subshell cause errors on
    #       bash-3.1.  See also:
    #       http://www.mail-archive.com/bug-bash@gnu.org/msg01667.html
    toks=( ${toks[@]-} $(
    compgen -d -- "$(quote_readline "$cur")" | {
    while read -r tmp; do
        echo $tmp
    done
}
))

if [[ "$1" != -d ]]; then
    xspec=${1:+"!*.$1"}
    toks=( ${toks[@]-} $(
    compgen -f -X "$xspec" -- "$(quote_readline "$cur")" | {
    while read -r tmp; do
        [ -n $tmp ] && echo $tmp
    done
}
))
    fi

    COMPREPLY=( "${COMPREPLY[@]}" "${toks[@]}" )
}

# This function splits $cur=--foo=bar into $prev=--foo, $cur=bar, making it
# easier to support both "--foo bar" and "--foo=bar" style completions.
# Returns 0 if current option was split, 1 otherwise.
#
_split_longopt()
{
    if [[ "$cur" == --?*=* ]]; then
        # Cut also backslash before '=' in case it ended up there
        # for some reason.
        prev="${cur%%?(\\)=*}"
        cur="${cur#*=}"
        return 0
    fi

    return 1
}

# This function tries to parse the output of $command --help
#
_parse_help() {
    local cmd
    cmd=$1
    $cmd --help | \
    grep -- "^[[:space:]]*-" | \
    tr "," " " | \
    awk '{print $1; if ($2 ~ /-.*/) { print $2 } }' | \
    sed -e "s:=.*::g"
}

# This function completes on signal names
#
_signals()
{
    local i

    # standard signal completion is rather braindead, so we need
    # to hack around to get what we want here, which is to
    # complete on a dash, followed by the signal name minus
    # the SIG prefix
    COMPREPLY=( $( compgen -A signal SIG${cur#-} ))
    for (( i=0; i < ${#COMPREPLY[@]}; i++ )); do
        COMPREPLY[i]=-${COMPREPLY[i]#SIG}
    done
}

# This function completes on configured network interfaces
#
_configured_interfaces()
{
    if [ -f /etc/debian_version ]; then
        # Debian system
        COMPREPLY=( $( sed -ne 's|^iface \([^ ]\+\).*$|\1|p' \
        /etc/network/interfaces ) )
    elif [ -f /etc/SuSE-release ]; then
        # SuSE system
        COMPREPLY=( $( command ls \
        /etc/sysconfig/network/ifcfg-* | \
        sed -ne 's|.*ifcfg-\('"$cur"'.*\)|\1|p' ) )
    elif [ -f /etc/pld-release ]; then
        # PLD Linux
        COMPREPLY=( $( command ls -B \
        /etc/sysconfig/interfaces | \
        sed -ne 's|.*ifcfg-\('"$cur"'.*\)|\1|p' ) )
    else
        # Assume Red Hat
        COMPREPLY=( $( command ls \
        /etc/sysconfig/network-scripts/ifcfg-* | \
        sed -ne 's|.*ifcfg-\('"$cur"'.*\)|\1|p' ) )
    fi
}

# This function completes on available kernels
#
_kernel_versions()
{
    COMPREPLY=( $( compgen -W '$( command ls /lib/modules )' -- "$cur" ) )
}

# This function completes on all available network interfaces
# -a: restrict to active interfaces only
# -w: restrict to wireless interfaces only
#
_available_interfaces()
{
    local cmd

    if [ "${1:-}" = -w ]; then
        cmd="iwconfig"
    elif [ "${1:-}" = -a ]; then
        cmd="ifconfig"
    else
        cmd="ifconfig -a"
    fi

    COMPREPLY=( $( eval $cmd 2>/dev/null | \
    sed -ne 's|^\('"$cur"'[^[:space:][:punct:]]\{1,\}\).*$|\1|p') )
}

# This function expands tildes in pathnames
#
_expand()
{
    # FIXME: Why was this here?
    #[ "$cur" != "${cur%\\}" ] && cur="$cur\\"

    # Expand ~username type directory specifications.  We want to expand
    # ~foo/... to /home/foo/... to avoid problems when $cur starting with
    # a tilde is fed to commands and ending up quoted instead of expanded.

    if [[ "$cur" == \~*/* ]]; then
        eval cur=$cur
    elif [[ "$cur" == \~* ]]; then
        cur=${cur#\~}
        COMPREPLY=( $( compgen -P '~' -u "$cur" ) )
        [ ${#COMPREPLY[@]} -eq 1 ] && eval COMPREPLY[0]=${COMPREPLY[0]}
        return ${#COMPREPLY[@]}
    fi
}

# This function completes on process IDs.
# AIX and Solaris ps prefers X/Open syntax.
[ $UNAME = SunOS -o $UNAME = AIX ] &&
_pids()
{
    COMPREPLY=( $( compgen -W '$( command ps -efo pid | sed 1d )' -- "$cur" ))
} ||
_pids()
{
    COMPREPLY=( $( compgen -W '$( command ps axo pid= )' -- "$cur" ) )
}

# This function completes on process group IDs.
# AIX and SunOS prefer X/Open, all else should be BSD.
[ $UNAME = SunOS -o $UNAME = AIX ] &&
_pgids()
{
    COMPREPLY=( $( compgen -W '$( command ps -efo pgid | sed 1d )' -- "$cur" ))
} ||
_pgids()
{
    COMPREPLY=( $( compgen -W '$( command ps axo pgid= )' -- "$cur" ))
}

# This function completes on process names.
# AIX and SunOS prefer X/Open, all else should be BSD.
[ $UNAME = SunOS -o $UNAME = AIX ] &&
_pnames()
{
    COMPREPLY=( $( compgen -W '$( command ps -efo comm | \
    sed -e 1d -e "s:.*/::" -e "s/^-//" \
    -e "s/^<defunct>$//")' \
    -- "$cur" ) )
} ||
_pnames()
{
    # FIXME: completes "[kblockd/0]" to "0". Previously it was completed
    # to "kblockd" which isn't correct either. "kblockd/0" would be
    # arguably most correct, but killall from psmisc 22 treats arguments
    # containing "/" specially unless -r is given so that wouldn't quite
    # work either. Perhaps it'd be best to not complete these to anything
    # for now.
    # Not using "ps axo comm" because under some Linux kernels, it
    # truncates command names (see e.g. http://bugs.debian.org/497540#19)
    COMPREPLY=( $( compgen -W '$( command ps axo command= | \
    sed -e "s/ .*//; s:.*/::; s/:$//;" \
    -e "s/^[[(-]//; s/[])]$//" \
    -e "s/^<defunct>$//")' \
    -- "$cur" ) )
}

# This function completes on user IDs
#
_uids()
{
    if type getent &>/dev/null; then
        COMPREPLY=( $( compgen -W '$( getent passwd | cut -d: -f3 )' -- "$cur" ) )
    elif type perl &>/dev/null; then
        COMPREPLY=( $( compgen -W '$( perl -e '"'"'while (($uid) = (getpwent)[2]) { print $uid . "\n" }'"'"' )' -- "$cur" ) )
    else
        # make do with /etc/passwd
        COMPREPLY=( $( compgen -W '$( cut -d: -f3 /etc/passwd )' -- "$cur" ) )
    fi
}

# This function completes on group IDs
#
_gids()
{
    if type getent &>/dev/null; then
        COMPREPLY=( $( getent group | \
        awk -F: '{if ($3 ~ /^'"$cur"'/) print $3}' ) )
    elif type perl &>/dev/null; then
        COMPREPLY=( $( compgen -W '$( perl -e '"'"'while (($gid) = (getgrent)[2]) { print $gid . "\n" }'"'"' )' -- "$cur" ) )
    else
        # make do with /etc/group
        COMPREPLY=( $( awk 'BEGIN {FS=":"} {if ($3 ~ /^'"$cur"'/) print $3}'\
        /etc/group ) )
    fi
}

# This function completes on services
#
_services()
{
    local sysvdir famdir
    [ -d /etc/rc.d/init.d ] && sysvdir=/etc/rc.d/init.d || sysvdir=/etc/init.d
    famdir=/etc/xinetd.d
    COMPREPLY=( $( builtin echo $sysvdir/!(*.rpm@(orig|new|save)|*~|functions)) )

    if [ -d $famdir ]; then
        COMPREPLY=( "${COMPREPLY[@]}" $( builtin echo $famdir/!(*.rpm@(orig|new|save)|*~)) )
    fi

    COMPREPLY=( $( compgen -W '${COMPREPLY[@]#@($sysvdir|$famdir)/}' -- "$cur" ) )
}

# This function completes on modules
#
_modules()
{
    local modpath
    modpath=/lib/modules/$1
    COMPREPLY=( $( command ls -R $modpath | \
    sed -ne 's/^\('"$cur"'.*\)\.k\?o\(\|.gz\)$/\1/p') )
}

# This function completes on installed modules
#
_installed_modules()
{
    COMPREPLY=( $( compgen -W "$( PATH="$PATH:/sbin" lsmod | \
    awk '{if (NR != 1) print $1}' )" -- $1 ) )
}

# This function completes on user:group format
#
_usergroup()
{
    local IFS=$'\n'
    cur=${cur//\\\\ / }
    if [[ $cur = *@(\\:|.)* ]] && [ -n "$bash205" ]; then
        user=${cur%%*([^:.])}
        COMPREPLY=( $(compgen -P ${user/\\\\} -g -- ${cur##*[.:]}) )
    elif [[ $cur = *:* ]] && [ -n "$bash205" ]; then
        COMPREPLY=( $( compgen -g -- ${cur##*[.:]} ) )
    else
        COMPREPLY=( $( compgen -S : -u -- "$cur" ) )
    fi
}

# This function completes on valid shells
#
_shells()
{
    COMPREPLY=( "${COMPREPLY[@]}" $( compgen -W '$( grep "^[[:space:]]*/" \
    /etc/shells 2>/dev/null )' -- "$cur" ) )
}

# Get real command.
# - arg: $1  Command
# - stdout:  Filename of command in PATH with possible symbolic links resolved.
#            Empty string if command not found.
# - return:  True (0) if command found, False (> 0) if not.
_realcommand() {
    type -P "$1" > /dev/null && {
    if type -p realpath > /dev/null; then
        realpath "$(type -P "$1")"
    elif type -p readlink > /dev/null; then
        readlink -f "$(type -P "$1")"
    else
        type -P "$1"
    fi
}
}


# this function count the number of mandatory args
#
_count_args()
{
    args=1
    for (( i=1; i < COMP_CWORD; i++ )); do
        if [[ "${COMP_WORDS[i]}" != -* ]]; then
            args=$(($args+1))
        fi
    done
}

# This function completes on PCI IDs
#
_pci_ids()
{
    COMPREPLY=( ${COMPREPLY[@]:-} $( compgen -W \
    "$( PATH="$PATH:/sbin" lspci -n | awk '{print $3}')" -- "$cur" ) )
}

# This function completes on USB IDs
#
_usb_ids()
{
    COMPREPLY=( ${COMPREPLY[@]:-} $( compgen -W \
    "$( PATH="$PATH:/sbin" lsusb | awk '{print $6}' )" -- "$cur" ) )
}

